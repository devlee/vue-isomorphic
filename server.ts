declare const process: any;

import * as fs from 'fs';
import * as Koa from 'koa';
import * as Router from 'koa-router';
import * as lruCache from 'lru-cache';
import * as path from 'path';

import setupDevServer from './config/webpack/setup-dev-server';

// tslint:disable-next-line:no-require-imports
const serialize = require('serialize-javascript');
// tslint:disable-next-line:no-require-imports
const vueServerRenderer = require('vue-server-renderer');

const resolve = (file: string): string => path.resolve(__dirname, file);

const app = new Koa();
const router = new Router();
const isProd = process.env.NODE_ENV === 'production';

let indexHTML: any; // generated by html-webpack-plugin
let renderer: any;  // created from the webpack-generated server bundle

function createRenderer(bundle: any) {
  return vueServerRenderer.createBundleRenderer(bundle, {
    cache: lruCache({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
  });
}

function parseIndex(template: any): Object {
  const contentMarker = '<!-- APP -->';
  const i = template.indexOf(contentMarker);
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length),
  };
}

if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'));
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  setupDevServer(app, {
    bundleUpdated: (bundle: any) => {
      renderer = createRenderer(bundle);
    },
    indexUpdated: (index: any) => {
      indexHTML = parseIndex(index);
    }
  })
}

router.get('/*', async (ctx) => {
  const res = ctx.res;
  const req = ctx.req;
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  const s = Date.now();
  const context = { url: req.url };
  const renderStream = renderer.renderToStream(context);

  renderStream.once('data', () => {
    res.write(indexHTML.head);
  });

  renderStream.on('data', (chunk: any) => {
    res.write(chunk);
  });

  renderStream.on('end', () => {
    // embed initial store state
    if ('initialState' in context) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
          // tslint:disable-next-line:no-string-literal
          serialize(context['initialState'], { isJSON: true })
        }</script>`);
    }
    res.end(indexHTML.tail);
    console.log(`whole request: ${Date.now() - s}ms`);
  });

  renderStream.on('error', (err: any) => {
    if (err && err.code === '404') {
      res.statusCode = 404;
      res.end('404 | Page Not Found');
      return;
    }
    // Render Error Page or Redirect
    res.statusCode = 500;
    res.end('Internal Error 500');
    console.error(`error during render : ${req.url}`);
    console.error(err);
  });
});

app.use(router.routes());
app.use(router.allowedMethods());

app.listen('5566', () => {
  console.log('app start at port 5566');
});
