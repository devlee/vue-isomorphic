import fs from 'fs';
import Koa from 'koa';
import Bigpige from 'koa-bigpipe';
import Router from 'koa-router';
import lruCache from 'lru-cache';
import path from 'path';

import setupDevServer from './config/webpack/setup-dev-server';

// tslint:disable-next-line:no-require-imports
const serialize = require('serialize-javascript');
// tslint:disable-next-line:no-require-imports
const vueServerRenderer = require('vue-server-renderer');

const resolve = file => path.resolve(__dirname, file);

const app = new Koa();
const router = new Router();
const isProd = process.env.NODE_ENV === 'production';

let indexHTML; // generated by html-webpack-plugin
let renderer;  // created from the webpack-generated server bundle

function createRenderer(bundle) {
  return vueServerRenderer.createBundleRenderer(bundle, {
    cache: lruCache({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
  });
}

function parseIndex(template) {
  const contentMarker = '<!-- APP -->';
  const i = template.indexOf(contentMarker);
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length),
  };
}

if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'));
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  setupDevServer(app, {
    bundleUpdated: (bundle) => {
      renderer = createRenderer(bundle);
    },
    indexUpdated: (index) => {
      indexHTML = parseIndex(index);
    },
  });
}

app.use(Bigpige);

app.use((ctx) => {console.log(123);
  const res = ctx.res;
  const req = ctx.req;
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.');
  }

  const s = Date.now();
  const context = { url: req.url };
  const renderStream = renderer.renderToStream(context);

  let firstChunk = true;

  // ctx.write(indexHTML.head);

  renderStream.on('data', (chunk) => {
    if (firstChunk) {
      // embed initial store state
      if (context.initialState) {
        // ctx.write(
        //   `<script>window.__INITIAL_STATE__=${
        //   serialize(context.initialState, { isJSON: true })
        //   }</script>`);
      }

      firstChunk = false;
    }
    console.log(666, chunk);
    ctx.end(chunk);
    console.log(777);
  });

  renderStream.on('end', () => {console.log(456);
    ctx.end(indexHTML.tail);
    console.log(`whole request: ${Date.now() - s}ms`);
  });

  renderStream.on('error', (err) => {
    if (err && err.code === '404') {
      ctx.statusCode = 404;
      ctx.end('404 | Page Not Found');
      return;
    }
    // Render Error Page or Redirect
    ctx.statusCode = 500;
    ctx.end('Internal Error 500');
    console.error(`error during render : ${req.url}`);
    console.error(err);
  });
});

app.listen('5566', () => {
  console.log('app start at port 5566');
});
