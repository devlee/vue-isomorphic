
import fs from 'fs';
import Koa from 'koa';
import Bigpige from 'koa-bigpipe';
import Router from 'koa-router';
import lruCache from 'lru-cache';
import path from 'path';

import setupDevServer from './config/webpack/setup-dev-server';

const serve = require('koa-static');
const favicon = require('koa-favicon')

process.env.VUE_ENV = 'server'
// tslint:disable-next-line:no-require-imports
const serialize = require('serialize-javascript');
// tslint:disable-next-line:no-require-imports
const vueServerRenderer = require('vue-server-renderer');

const resolve = file => path.resolve(__dirname, file);

const app = new Koa();
const router = new Router();
const isProd = process.env.NODE_ENV === 'production';

let html; // generated by html-webpack-plugin
let renderer;  // created from the webpack-generated server bundle

function createRenderer(bundle) {
  return vueServerRenderer.createBundleRenderer(bundle, {
    cache: lruCache({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
  });
}

function parseIndex(template) {
  const contentMarker = '<!-- APP -->';
  const i = template.indexOf(contentMarker);
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length),
  };
}

if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'));
  html = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  setupDevServer(app, {
    bundleUpdated: (bundle) => {
      renderer = createRenderer(bundle);
    },
    indexUpdated: (index) => {
      html = parseIndex(index);
    },
  });
}

app.use(require('koa-bigpipe'));
app.use(favicon(path.resolve(__dirname, 'public/logo-400.png')))

router.get('/dist', serve(resolve('./dist')));

app.use((ctx, next) => {
  let req = ctx.req
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  var s = Date.now()
  const context = { url: req.url }
  const renderStream = renderer.renderToStream(context)
  let firstChunk = true

  ctx.write(html.head)

  renderStream.on('data', chunk => {
    if (firstChunk) {
      // embed initial store state
      if (context.initialState) {
        ctx.write(
          `<script>window.__INITIAL_STATE__=${
            serialize(context.initialState, { isJSON: true })
          }</script>`
        )
      }
      firstChunk = false
    }
    ctx.write(chunk)
  })

  renderStream.on('end', () => {
    ctx.end(html.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })

  renderStream.on('error', err => {
    throw err
  })
})


app
  .use(router.routes())
  .use(router.allowedMethods());
  
const port = process.env.PORT || 5566
app.listen(port, () => {
  console.log(`server started at http://localhost:${port}`)
})
